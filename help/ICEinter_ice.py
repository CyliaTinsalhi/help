# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `ICEinter.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module app
_M_app = Ice.openModule('app')
__name__ = 'app'

if 'Song' not in _M_app.__dict__:
    _M_app.Song = Ice.createTempClass()
    class Song(Ice.Value):
        def __init__(self, titre='', artist='', audio=''):
            self.titre = titre
            self.artist = artist
            self.audio = audio

        def ice_id(self):
            return '::app::Song'

        @staticmethod
        def ice_staticId():
            return '::app::Song'

        def __str__(self):
            return IcePy.stringify(self, _M_app._t_Song)

        __repr__ = __str__

    _M_app._t_Song = IcePy.defineValue('::app::Song', Song, -1, (), False, False, None, (
        ('titre', (), IcePy._t_string, False, 0),
        ('artist', (), IcePy._t_string, False, 0),
        ('audio', (), IcePy._t_string, False, 0)
    ))
    Song._ice_type = _M_app._t_Song

    _M_app.Song = Song
    del Song

if '_t_songs' not in _M_app.__dict__:
    _M_app._t_songs = IcePy.defineSequence('::app::songs', (), _M_app._t_Song)

_M_app._t_MusicServer = IcePy.defineValue('::app::MusicServer', Ice.Value, -1, (), False, True, None, ())

if 'MusicServerPrx' not in _M_app.__dict__:
    _M_app.MusicServerPrx = Ice.createTempClass()
    class MusicServerPrx(Ice.ObjectPrx):

        def upload(self, s, context=None):
            return _M_app.MusicServer._op_upload.invoke(self, ((s, ), context))

        def uploadAsync(self, s, context=None):
            return _M_app.MusicServer._op_upload.invokeAsync(self, ((s, ), context))

        def begin_upload(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_upload.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_upload(self, _r):
            return _M_app.MusicServer._op_upload.end(self, _r)

        def delete(self, titre, context=None):
            return _M_app.MusicServer._op_delete.invoke(self, ((titre, ), context))

        def deleteAsync(self, titre, context=None):
            return _M_app.MusicServer._op_delete.invokeAsync(self, ((titre, ), context))

        def begin_delete(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_delete.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_delete(self, _r):
            return _M_app.MusicServer._op_delete.end(self, _r)

        def modify(self, s, context=None):
            return _M_app.MusicServer._op_modify.invoke(self, ((s, ), context))

        def modifyAsync(self, s, context=None):
            return _M_app.MusicServer._op_modify.invokeAsync(self, ((s, ), context))

        def begin_modify(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_modify.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_modify(self, _r):
            return _M_app.MusicServer._op_modify.end(self, _r)

        def findByName(self, titre, context=None):
            return _M_app.MusicServer._op_findByName.invoke(self, ((titre, ), context))

        def findByNameAsync(self, titre, context=None):
            return _M_app.MusicServer._op_findByName.invokeAsync(self, ((titre, ), context))

        def begin_findByName(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_findByName.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_findByName(self, _r):
            return _M_app.MusicServer._op_findByName.end(self, _r)

        def findByArtist(self, artist, context=None):
            return _M_app.MusicServer._op_findByArtist.invoke(self, ((artist, ), context))

        def findByArtistAsync(self, artist, context=None):
            return _M_app.MusicServer._op_findByArtist.invokeAsync(self, ((artist, ), context))

        def begin_findByArtist(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_findByArtist.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_findByArtist(self, _r):
            return _M_app.MusicServer._op_findByArtist.end(self, _r)

        def getAll(self, context=None):
            return _M_app.MusicServer._op_getAll.invoke(self, ((), context))

        def getAllAsync(self, context=None):
            return _M_app.MusicServer._op_getAll.invokeAsync(self, ((), context))

        def begin_getAll(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_getAll.begin(self, ((), _response, _ex, _sent, context))

        def end_getAll(self, _r):
            return _M_app.MusicServer._op_getAll.end(self, _r)

        def play(self, s, context=None):
            return _M_app.MusicServer._op_play.invoke(self, ((s, ), context))

        def playAsync(self, s, context=None):
            return _M_app.MusicServer._op_play.invokeAsync(self, ((s, ), context))

        def begin_play(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_play.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_play(self, _r):
            return _M_app.MusicServer._op_play.end(self, _r)

        def pause(self, id, context=None):
            return _M_app.MusicServer._op_pause.invoke(self, ((id, ), context))

        def pauseAsync(self, id, context=None):
            return _M_app.MusicServer._op_pause.invokeAsync(self, ((id, ), context))

        def begin_pause(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_pause.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_pause(self, _r):
            return _M_app.MusicServer._op_pause.end(self, _r)

        def resume(self, id, context=None):
            return _M_app.MusicServer._op_resume.invoke(self, ((id, ), context))

        def resumeAsync(self, id, context=None):
            return _M_app.MusicServer._op_resume.invokeAsync(self, ((id, ), context))

        def begin_resume(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_resume.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_resume(self, _r):
            return _M_app.MusicServer._op_resume.end(self, _r)

        def stop(self, id, context=None):
            return _M_app.MusicServer._op_stop.invoke(self, ((id, ), context))

        def stopAsync(self, id, context=None):
            return _M_app.MusicServer._op_stop.invokeAsync(self, ((id, ), context))

        def begin_stop(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicServer._op_stop.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_app.MusicServer._op_stop.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_app.MusicServerPrx.ice_checkedCast(proxy, '::app::MusicServer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_app.MusicServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::app::MusicServer'
    _M_app._t_MusicServerPrx = IcePy.defineProxy('::app::MusicServer', MusicServerPrx)

    _M_app.MusicServerPrx = MusicServerPrx
    del MusicServerPrx

    _M_app.MusicServer = Ice.createTempClass()
    class MusicServer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::app::MusicServer')

        def ice_id(self, current=None):
            return '::app::MusicServer'

        @staticmethod
        def ice_staticId():
            return '::app::MusicServer'

        def upload(self, s, current=None):
            raise NotImplementedError("servant method 'upload' not implemented")

        def delete(self, titre, current=None):
            raise NotImplementedError("servant method 'delete' not implemented")

        def modify(self, s, current=None):
            raise NotImplementedError("servant method 'modify' not implemented")

        def findByName(self, titre, current=None):
            raise NotImplementedError("servant method 'findByName' not implemented")

        def findByArtist(self, artist, current=None):
            raise NotImplementedError("servant method 'findByArtist' not implemented")

        def getAll(self, current=None):
            raise NotImplementedError("servant method 'getAll' not implemented")

        def play(self, s, current=None):
            raise NotImplementedError("servant method 'play' not implemented")

        def pause(self, id, current=None):
            raise NotImplementedError("servant method 'pause' not implemented")

        def resume(self, id, current=None):
            raise NotImplementedError("servant method 'resume' not implemented")

        def stop(self, id, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_app._t_MusicServerDisp)

        __repr__ = __str__

    _M_app._t_MusicServerDisp = IcePy.defineClass('::app::MusicServer', MusicServer, (), None, ())
    MusicServer._ice_type = _M_app._t_MusicServerDisp

    MusicServer._op_upload = IcePy.Operation('upload', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_app._t_Song, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicServer._op_delete = IcePy.Operation('delete', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicServer._op_modify = IcePy.Operation('modify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_app._t_Song, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicServer._op_findByName = IcePy.Operation('findByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_app._t_songs, False, 0), ())
    MusicServer._op_findByArtist = IcePy.Operation('findByArtist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_app._t_songs, False, 0), ())
    MusicServer._op_getAll = IcePy.Operation('getAll', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_app._t_songs, False, 0), ())
    MusicServer._op_play = IcePy.Operation('play', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_app._t_Song, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicServer._op_pause = IcePy.Operation('pause', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicServer._op_resume = IcePy.Operation('resume', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicServer._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_app.MusicServer = MusicServer
    del MusicServer

_M_app._t_MusicClient = IcePy.defineValue('::app::MusicClient', Ice.Value, -1, (), False, True, None, ())

if 'MusicClientPrx' not in _M_app.__dict__:
    _M_app.MusicClientPrx = Ice.createTempClass()
    class MusicClientPrx(Ice.ObjectPrx):

        def ping(self, context=None):
            return _M_app.MusicClient._op_ping.invoke(self, ((), context))

        def pingAsync(self, context=None):
            return _M_app.MusicClient._op_ping.invokeAsync(self, ((), context))

        def begin_ping(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicClient._op_ping.begin(self, ((), _response, _ex, _sent, context))

        def end_ping(self, _r):
            return _M_app.MusicClient._op_ping.end(self, _r)

        def getServer(self, ip, context=None):
            return _M_app.MusicClient._op_getServer.invoke(self, ((ip, ), context))

        def getServerAsync(self, ip, context=None):
            return _M_app.MusicClient._op_getServer.invokeAsync(self, ((ip, ), context))

        def begin_getServer(self, ip, _response=None, _ex=None, _sent=None, context=None):
            return _M_app.MusicClient._op_getServer.begin(self, ((ip, ), _response, _ex, _sent, context))

        def end_getServer(self, _r):
            return _M_app.MusicClient._op_getServer.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_app.MusicClientPrx.ice_checkedCast(proxy, '::app::MusicClient', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_app.MusicClientPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::app::MusicClient'
    _M_app._t_MusicClientPrx = IcePy.defineProxy('::app::MusicClient', MusicClientPrx)

    _M_app.MusicClientPrx = MusicClientPrx
    del MusicClientPrx

    _M_app.MusicClient = Ice.createTempClass()
    class MusicClient(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::app::MusicClient')

        def ice_id(self, current=None):
            return '::app::MusicClient'

        @staticmethod
        def ice_staticId():
            return '::app::MusicClient'

        def ping(self, current=None):
            raise NotImplementedError("servant method 'ping' not implemented")

        def getServer(self, ip, current=None):
            raise NotImplementedError("servant method 'getServer' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_app._t_MusicClientDisp)

        __repr__ = __str__

    _M_app._t_MusicClientDisp = IcePy.defineClass('::app::MusicClient', MusicClient, (), None, ())
    MusicClient._ice_type = _M_app._t_MusicClientDisp

    MusicClient._op_ping = IcePy.Operation('ping', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MusicClient._op_getServer = IcePy.Operation('getServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_app._t_MusicServer, False, 0), ())

    _M_app.MusicClient = MusicClient
    del MusicClient

# End of module app
